Building : Actor | Interface1, Interface2
{
	var float Var1 <Category : Components, InstanceEditable
	: true, Tooltip: "This is some text", BlueprintReadOnly: false, ExposeOnSpawn: false, Private     :    false, Replication  : Replicated, ExposeToCinematics: var false, SliderRange: {0, 1}, ValueRange: {-30, 30}> = 3;
	var Actor*[] Var2 = {None, None, None, None}; // Object Reference
	var Actor&{} Var3 = {None}; // Class Reference
	var Actor$:Actor# Var4 = {None: None}; // Soft Object Reference Key to Soft Class Reference Value

	// Define an event dispatcher
	dispatcher TestEventDispatcher(int Param1 = 7, ref Actor* Param2);

	// Set the defaults of variables not defined in this class.
	defaults
	{
		StartWithTickEnabled = true;
		TickInterval = 10;
		SpawnCollisionHandling = TryToAdjustLocationDontSpawnIfStillColliding;
	}

	// The construction script
	construction
	{
		// Assign Var1
		Var1 = 10;
		// Assign the 3rd element of Var2
		Var2[2] = self;
	}

	event:EventGraph BeginPlay()
	{
		BindEvent(TestEventDispatcher, MyCustomEvent);
	}

	event:EventGraph Tick(float DeltaSeconds)
	{
		// Use a flip flop. We ignore the IsA value
		FlipFlop()
		// The path to follow if the flip flop is on A
		A {
			Var1 = 0;
		}
		// The path to follow if the flip flop is on B
		B {
			Var1 = 5;
		};

		// Set hitData and hit to OutHit and ReturnValue (respectively) of the call to LineTraceByChannel. Use the parameters named.
		hitData:OutHit, hit:ReturnValue = LineTraceByChannel(Start: {X: 0, Y: 0, Z: 0}, End: {X: 10000, Y: 0, Z: 0}, TraceChannel: Visibility);

		if (hit)
		{
			// Call BreakHitResult. hitData will go into the first parameter since it is not named.
			HitActor: HitActor, ImpactPoint: ImpactPoint = BreakHitResult(hitData);
			// Call the event dispatcher, 7 will go to the first parameter, HitActor will go to the second parameter.
			TestEventDispatcher(7, HitActor);
		}

		// Set MyA1 to connect to A1 of this test macro. Connect the current execution line to A2.
		TestMacro(A1: MyA1, A2: Exec)
		B1 {
			// Call ThisIsACollapsedNode
			ThisIsACollapsedNode(Clamp(DeltaSeconds, 0, 1):ReturnValue);
		}
		B2 {
			// Connect the current execution line to MyA1
			end MyA1;
		};
		// After the test macro, B1 will connect to whatever is down here.
		// Set Var1 to the value of TickInterval from the element at index 2 of Var2 + 27.
		Var1 = Var2[2].TickInterval + (10 * (-3 + 5) + (10 - 3);

		// Not breakable loop
		for i | [0, 10]
		{
			PrintString(Str(i));
		}

		// Breakable loop
		for: i | [0, Var1]
		{
			PrintString(Str(i));
			if (i % 3 == 0)
			{
				break;
			}
		}

		// Same loop, except now break Exec is named. 
		for:Break1 i | [0, Var1]
		{
			PrintString(Str(i));
			if (i % 3 == 0)
			{
				// Both of these do the same thing.
				break;
				// end Break1;
			}
		}

		// While loop
		while (Var1 > 0)
		{
			PrintString(Var1);
			Var1 = Var1 - 1;
		}

		// For each loop that is breakable.
		foreach:Break2 i | Var2
		{
			PrintString(Str(i));
			if (i % 3 == 0)
			{
				end Break2;
			}
		}
	}

	event:CustomGraph MyCustomEvent<CallInEditor: false>(int Param1 = 3, ref Actor* Param2)
	{
		PrintString("Hello!!!");
	}

	collapsed:Tick ThisIsACollapsedNode(Exec execute, float DeltaSeconds) : Exec Out
	// Since this block is unnamed, it will default to the "execute" Exec line.
	{
		end Out;
	}

	function TestFunc() : Vector Dir, float Len
	{
		local int XVal = 1;
		Dir = MakeVector(X: XVal);

		return Dir: Dir, Len: 10;
	}

	macro TestMacro(Exec A1, Exec A2) : Exec B1, Exec B2, float Value
	A1 {
		end B1;
	}
	A2 {
		if(Var1 == 0)
		{
			Value = Var1;
			end B1;
		}
		else
		{
			end B2;
		}
	}
}